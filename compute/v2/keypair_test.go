// Copyright (c) 2014 Hewlett-Packard Development Company, L.P.
//
//    Licensed under the Apache License, Version 2.0 (the "License"); you may
//    not use this file except in compliance with the License. You may obtain
//    a copy of the License at
//
//         http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
//    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
//    License for the specific language governing permissions and limitations
//    under the License.

package compute_test

import (
	"encoding/json"
	"errors"
	"git.openstack.org/stackforge/golang-client.git/compute/v2"
	"git.openstack.org/stackforge/golang-client.git/testutil"
	"net/http"
	"testing"
)

var tokn = "eaaafd18-0fed-4b3a-81b4-663c99ec1cbb"
var samplePublicKey = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC+Eo/RZRngaGTkFs7I62ZjsIlO79KklKbMXi8F+KITD4bVQHHn+kV+4gRgkgCRbdoDqoGfpaDFs877DYX9n4z6FrAIZ4PES8TNKhatifpn9NdQYWA+IkU8CuvlEKGuFpKRi/k7JLos/gHi2hy7QUwgtRvcefvD/vgQZOVw/mGR9Q== Generated by Nova\n"
var sampleKeyPair = compute.KeyPair{
	Name:        "keypairName",
	FingerPrint: "15:b0:f8:b3:f9:48:63:71:cf:7b:5b:38:6d:44:2d:4a",
	PublicKey:   samplePublicKey}

func TestGetKeyPairs(t *testing.T) {
	mockResponseObject := keyPairsContainer{KeyPairs: []keyPairContainer{keyPairContainer{KeyPair: sampleKeyPair}}}
	apiServer := testUtil.CreateGetJSONTestRequestServerWithMockObject(t, tokn, mockResponseObject, "os-keypairs")
	defer apiServer.Close()

	service := CreateComputeService(apiServer.URL)
	keyPairs, err := service.KeyPairs()
	if err != nil {
		t.Error(err)
	}

	if len(keyPairs) != 1 {
		t.Error(errors.New("Error: Expected 2 keypairs to be listed"))
	}
	testUtil.Equals(t, sampleKeyPair, keyPairs[0])
}

func TestGetKeyPair(t *testing.T) {
	mockResponseObject := keyPairContainer{KeyPair: sampleKeyPair}
	apiServer := testUtil.CreateGetJSONTestRequestServerWithMockObject(t, tokn, mockResponseObject, "os-keypairs/keypairName")
	defer apiServer.Close()

	service := CreateComputeService(apiServer.URL)
	keypair, err := service.KeyPair("keypairName")
	if err != nil {
		t.Error(err)
	}

	testUtil.Equals(t, sampleKeyPair, keypair)
}

func TestDeleteKeyPair(t *testing.T) {
	name := "keypairName"
	apiServer := testUtil.CreateDeleteTestRequestServer(t, tokn, "os-keypairs/"+name)
	defer apiServer.Close()

	service := CreateComputeService(apiServer.URL)
	err := service.DeleteKeyPair(name)
	if err != nil {
		t.Error(err)
	}
}

func TestCreateKeyPair(t *testing.T) {
	mockResponse, _ := json.Marshal(keyPairContainer{sampleKeyPair})
	apiServer := testUtil.CreatePostJSONTestRequestServer(t, tokn, string(mockResponse), "os-keypairs",
		`{"keypair":{"name":"keypairName","public_key":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC+Eo/RZRngaGTkFs7I62ZjsIlO79KklKbMXi8F+KITD4bVQHHn+kV+4gRgkgCRbdoDqoGfpaDFs877DYX9n4z6FrAIZ4PES8TNKhatifpn9NdQYWA+IkU8CuvlEKGuFpKRi/k7JLos/gHi2hy7QUwgtRvcefvD/vgQZOVw/mGR9Q== Generated by Nova\n"}}`)
	defer apiServer.Close()

	service := CreateComputeService(apiServer.URL)
	actualkeyPair, err := service.CreateKeyPair("keypairName", samplePublicKey)
	if err != nil {
		t.Error(err)
	}

	testUtil.Equals(t, sampleKeyPair, actualkeyPair)
}

func CreateComputeService(url string) compute.Service {
	return compute.Service{TokenID: tokn, Client: *http.DefaultClient, URL: url}
}

type keyPairsContainer struct {
	KeyPairs []keyPairContainer `json:"keypairs"`
}

type keyPairContainer struct {
	KeyPair compute.KeyPair `json:"keypair"`
}
